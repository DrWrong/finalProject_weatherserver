// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thrift_interface

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

type CityWeatherInfoService interface {
	CommonService

	// Parameters:
	//  - CommonRequest
	//  - CityInfo
	GetCityWeatherInfo(commonRequest *CommonRequest, cityInfo *CityWeatherInfoRequest) (r string, err error)
}

type CityWeatherInfoServiceClient struct {
	*CommonServiceClient
}

func NewCityWeatherInfoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CityWeatherInfoServiceClient {
	return &CityWeatherInfoServiceClient{CommonServiceClient: NewCommonServiceClientFactory(t, f)}
}

func NewCityWeatherInfoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CityWeatherInfoServiceClient {
	return &CityWeatherInfoServiceClient{CommonServiceClient: NewCommonServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - CommonRequest
//  - CityInfo
func (p *CityWeatherInfoServiceClient) GetCityWeatherInfo(commonRequest *CommonRequest, cityInfo *CityWeatherInfoRequest) (r string, err error) {
	if err = p.sendGetCityWeatherInfo(commonRequest, cityInfo); err != nil {
		return
	}
	return p.recvGetCityWeatherInfo()
}

func (p *CityWeatherInfoServiceClient) sendGetCityWeatherInfo(commonRequest *CommonRequest, cityInfo *CityWeatherInfoRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getCityWeatherInfo", thrift.CALL, p.SeqId)
	args12 := NewGetCityWeatherInfoArgs()
	args12.CommonRequest = commonRequest
	args12.CityInfo = cityInfo
	err = args12.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *CityWeatherInfoServiceClient) recvGetCityWeatherInfo() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result13 := NewGetCityWeatherInfoResult()
	err = result13.Read(iprot)
	iprot.ReadMessageEnd()
	value = result13.Success
	return
}

type CityWeatherInfoServiceProcessor struct {
	*CommonServiceProcessor
}

func NewCityWeatherInfoServiceProcessor(handler CityWeatherInfoService) *CityWeatherInfoServiceProcessor {
	self16 := &CityWeatherInfoServiceProcessor{NewCommonServiceProcessor(handler)}
	self16.AddToProcessorMap("getCityWeatherInfo", &cityWeatherInfoServiceProcessorGetCityWeatherInfo{handler: handler})
	return self16
}

type cityWeatherInfoServiceProcessorGetCityWeatherInfo struct {
	handler CityWeatherInfoService
}

func (p *cityWeatherInfoServiceProcessorGetCityWeatherInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetCityWeatherInfoArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCityWeatherInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetCityWeatherInfoResult()
	if result.Success, err = p.handler.GetCityWeatherInfo(args.CommonRequest, args.CityInfo); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCityWeatherInfo: "+err.Error())
		oprot.WriteMessageBegin("getCityWeatherInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getCityWeatherInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type GetCityWeatherInfoArgs struct {
	CommonRequest *CommonRequest          `thrift:"commonRequest,1"`
	CityInfo      *CityWeatherInfoRequest `thrift:"cityInfo,2"`
}

func NewGetCityWeatherInfoArgs() *GetCityWeatherInfoArgs {
	return &GetCityWeatherInfoArgs{}
}

func (p *GetCityWeatherInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCityWeatherInfoArgs) readField1(iprot thrift.TProtocol) error {
	p.CommonRequest = NewCommonRequest()
	if err := p.CommonRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CommonRequest)
	}
	return nil
}

func (p *GetCityWeatherInfoArgs) readField2(iprot thrift.TProtocol) error {
	p.CityInfo = NewCityWeatherInfoRequest()
	if err := p.CityInfo.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CityInfo)
	}
	return nil
}

func (p *GetCityWeatherInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCityWeatherInfo_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCityWeatherInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.CommonRequest != nil {
		if err := oprot.WriteFieldBegin("commonRequest", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:commonRequest: %s", p, err)
		}
		if err := p.CommonRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CommonRequest)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:commonRequest: %s", p, err)
		}
	}
	return err
}

func (p *GetCityWeatherInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.CityInfo != nil {
		if err := oprot.WriteFieldBegin("cityInfo", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:cityInfo: %s", p, err)
		}
		if err := p.CityInfo.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CityInfo)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:cityInfo: %s", p, err)
		}
	}
	return err
}

func (p *GetCityWeatherInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCityWeatherInfoArgs(%+v)", *p)
}

type GetCityWeatherInfoResult struct {
	Success string `thrift:"success,0"`
}

func NewGetCityWeatherInfoResult() *GetCityWeatherInfoResult {
	return &GetCityWeatherInfoResult{}
}

func (p *GetCityWeatherInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetCityWeatherInfoResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 0: %s")
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetCityWeatherInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCityWeatherInfo_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *GetCityWeatherInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
		return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Success)); err != nil {
		return fmt.Errorf("%T.success (0) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 0:success: %s", p, err)
	}
	return err
}

func (p *GetCityWeatherInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCityWeatherInfoResult(%+v)", *p)
}
